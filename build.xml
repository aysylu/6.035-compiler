<project name="Compiler" default="run" basedir=".">
  <!-- Manually generated java files -->
  <property name="src"     location="src"     />
  <!-- Auto-generated java files -->
  <property name="java"    location="java"    />
  <!-- Target Dir for compile -->
  <property name="classes" location="classes" />
  <property name="classes.instrumented" location="instrumented" />
  <!-- target dir for report -->
  <property name="report" location="report" />
  <!-- Jar directory -->
  <property name="dist"    location="dist"    />
  <!-- Runtime libraries -->
  <property name="lib"     location="lib"     />
  <!-- Binaries for tools, etc. -->
  <property name="bin"     location="bin"     />
  <!-- One jar support -->
  <property name="one-jar.dist.dir" value="lib"/>
  <import file="one-jar-ant-task.xml" />
  <taskdef name="groovyc"
         classname="org.codehaus.groovy.ant.Groovyc"
         classpath="${groovy-lib.dir}/groovy-1.6.9.jar"/>
  <taskdef name="groovy"
         classname="org.codehaus.groovy.ant.Groovy"
         classpath="${groovy-lib.dir}/groovy-1.6.9.jar"/>
  <property name="gradingscripts"     location="gradingscripts"     />
  <!-- the main class -->
  <property name="mainclass" value="decaf.GroovyMain" />

  <property file="execute.properties"/>
  <property name="groovy-lib.dir" value="/usr/share/groovy/lib"/>

  <!-- We rely on ANTLR 2.7.7  -->
  
  <!-- Build up a path structure for a classpath 
       that includes the binaries (jars) in bin/ and 
       the existing classpath.  Not used now, 
       because the jflex and cup task define their own cp, 
       but could come in handly later. -->
  <path id="binaries">
    <pathelement location="${bin}" />
    <fileset dir="${bin}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <pathelement path="${java.class.path}" />
    <pathelement path="${classes}" />
  </path>

  <!-- Build up a path structure for a classpath 
       that includes the libraries and the existing classpath -->
  <path id="libraries">
    <pathelement location="${lib}" />
    <fileset dir="${lib}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <fileset dir="${groovy-lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement path="${java.class.path}" />
  </path>

  <target name="init">
    <mkdir dir="${classes}"/>
    <delete dir="${classes.instrumented}" />
    <mkdir dir="${classes.instrumented}"/>
    <mkdir dir="${java}"/>
    <mkdir dir="${dist}"/>
    <mkdir dir="${java}/decaf"/>
  </target>

  <!-- copy manual edited sources to automatically generated ones -->
  <target name="copy_src" depends="init">
   <copy todir="${java}">
     <fileset dir="${src}" includes="**/**.java" />
   </copy>
  </target>

  <target name="scanner" depends="init">
    <antlr
      target="${src}/decaf/Lexer.g"
      outputdirectory="${java}/decaf">
      <classpath>
        <pathelement location="${lib}/antlr.jar" />
      </classpath>
    </antlr>
  </target>

  <target name="parser" depends="scanner">
    <!-- set trace="yes" if you want to trace the praser actions -->
    <antlr
      target="${src}/decaf/Parser.g"
      outputdirectory="${java}/decaf">
      <classpath>
        <pathelement location="${lib}/antlr.jar" />
      </classpath>
    </antlr>
  </target>

  <target name="compile" depends="parser">
    <javac srcdir="${java}:${src}" destdir="${classes}">
      <classpath refid="libraries"/>
    </javac>
    <groovyc srcdir="${java}:${src}" destdir="${classes}" stacktrace="true">
      <classpath refid="libraries"/>
      <classpath>
        <pathelement location="${classes}" />
      </classpath>
    </groovyc>
  </target>

  <target name="dist" depends="compile">
    <one-jar destfile="${dist}/Compiler.jar">
     <manifest>
       <attribute name="One-Jar-Main-Class" value="${mainclass}" />
       <!-- ANTLR runtime is needed for parsing! -->
       <attribute name="Class-Path" value="antlr.jar" />
     </manifest>
     <main>
       <fileset dir="${classes}" includes="**/**.class" />
     </main>
     <lib>
       <fileset dir="${lib}" includes="**/*.jar" />
     </lib>
    </one-jar>
    <jar destfile="${dist}/compiler-classes.jar" basedir="classes" />
    <!-- Third party libraries can only be found by java -jar if they reside in the same dir -->
    <copy todir="${dist}">
	<fileset dir="${lib}" includes="**/**.jar"/>
    </copy>
  </target>

  <target name="run" depends="compile">
    <java classname="${mainclass}" fork="true">
      <classpath>
        <pathelement path="${classes}"/>
        <fileset dir="${lib}" includes="**/*.jar" />
      </classpath>
      <arg value="${Compiler.decafFile}"/>
      <arg value="-target" />
      <arg value="${Compiler.target}"/>
      <arg value="-assertEnabled"/>
      <arg value="-opt"/>
      <arg value="all"/>
    </java>
  </target>

  <path id="cobertura.classpath">
    <fileset dir="cobertura-lib">
      <include name="cobertura.jar"/>
      <include name="lib/**/*.jar"/>
    </fileset>
    <pathelement location="${classes.instrumented}"/>
  </path>
  <taskdef classpath="${lib}/cobertura.jar" resource="tasks.properties" classpathref="cobertura.classpath" />

  <target name="instrument" depends="compile">
    <delete file="cobertura.ser"/>
    <cobertura-instrument todir="${classes.instrumented}">
      <fileset dir="${classes}">
        <include name="**/*.class"/>
        <exclude name="**/Decaf*"/>
        <exclude name="**/*Test*"/>
      </fileset>
    </cobertura-instrument>
    <property name="instrumentedClasses" value="true"/>
  </target>

  <target name="test" depends="compile">
    <condition property="junitfork">
      <isset property="instrumentedClasses"/>
    </condition>
    <junit fork="${junitfork}">
      <classpath>
        <pathelement path="${classes.instrumented}"/>
        <pathelement path="${classes}"/>
        <fileset dir="${lib}" includes="**/*.jar" />
      </classpath>
      <classpath refid="cobertura.classpath"/>
      <formatter type="plain" usefile="false"/>
      <batchtest>
        <fileset dir="${classes}">
          <include name="decaf/test/*Test*"/>
          <!-- exclude inner classes/closures -->
          <exclude name="decaf/test/*$*"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="coverage" depends="instrument,test">
    <delete dir="${report}"/>
    <mkdir dir="${report}"/>
    <cobertura-report srcdir="${src}" destdir="${report}">
      <classpath>
        <fileset dir="${lib}" includes="**/*.jar" />
      </classpath>
    </cobertura-report>
  </target>

  <target name="grade" depends="compile">
    <groovy>
      new File('/mit/6.035/provided/gradingscripts').eachFile {file ->
        assert file.name.endsWith('py')
        println "executing $file"
        Process p = "$file.canonicalPath .".execute()
        Thread.start { ->
          println '
          p.inputStream.eachLine{ println it}
          p.inputStream.close()
        }
        Thread.start { -> p.errorStream.eachLine{ println it}; p.errorStream.close() }
        p.waitFor()
      }
    </groovy>
  </target>

  <target name="automation" depends="compile">
    <groovy src="src/AutomationRunner.groovy">
      <classpath>
        <pathelement path="${classes}"/>
        <fileset dir="${lib}" includes="**/*.jar" />
      </classpath>
    </groovy>
  </target>

 <!-- to clean, delete everything in the java, classes, and dist
  directory -->
  <target name="clean">
     <delete dir="${java}" />
     <delete dir="${report}" />
     <delete dir="${classes}" />
     <delete dir="${classes.instrumented}" />
     <delete dir="${dist}" />
  </target>

</project>
